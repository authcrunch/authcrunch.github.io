"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8724],{7631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"authorize/headers","title":"HTTP Headers","description":"Pass JWT Token Claims in HTTP Request Headers","source":"@site/docs/authorize/headers.md","sourceDirName":"authorize","slug":"/authorize/headers","permalink":"/docs/authorize/headers","draft":false,"unlisted":false,"editUrl":"https://github.com/authcrunch/authcrunch.github.io/edit/main/docs/authorize/headers.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Path-Based Access Lists","permalink":"/docs/authorize/path-acl"},"next":{"title":"Caddy User Identity","permalink":"/docs/authorize/identity"}}');var s=t(4848),i=t(8453);const o={sidebar_position:11},a="HTTP Headers",d={},c=[{value:"Pass JWT Token Claims in HTTP Request Headers",id:"pass-jwt-token-claims-in-http-request-headers",level:2},{value:"Auto-Defined Headers",id:"auto-defined-headers",level:3},{value:"Custom Headers",id:"custom-headers",level:3},{value:"Nested Data Source",id:"nested-data-source",level:4},{value:"Strip JWT Token from HTTP Request",id:"strip-jwt-token-from-http-request",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"http-headers",children:"HTTP Headers"})}),"\n",(0,s.jsx)(n.h2,{id:"pass-jwt-token-claims-in-http-request-headers",children:"Pass JWT Token Claims in HTTP Request Headers"}),"\n",(0,s.jsx)(n.h3,{id:"auto-defined-headers",children:"Auto-Defined Headers"}),"\n",(0,s.jsx)(n.p,{children:"To pass JWT token claims in auto-generated HTTP headers to downstream\nplugins, use the following Caddyfile directive:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"{\n  security {\n    authorization policy mypolicy {\n      inject headers with claims\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The downstream plugins would get the following ",(0,s.jsx)(n.code,{children:"X-Token-"})," headers:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    "X-Token-Subject": "webadmin"\n    "X-Token-User-Name": "Web Administrator"\n    "X-Token-User-Email": "webadmin@localdomain.local"\n    "X-Token-User-Roles": "superadmin guest anonymous"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-headers",children:"Custom Headers"}),"\n",(0,s.jsx)(n.p,{children:"The syntax for adding a custom header follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"inject header <header_name> from <field_name>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For example, add the injection of ",(0,s.jsx)(n.code,{children:"X-Picture"})," header with the value from ",(0,s.jsx)(n.code,{children:"picture"})," field\nof JWT token:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  security {\n    authorization policy mypolicy {\n      inject headers with claims\n      inject header "X-Picture" from picture\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["After the addition, we could see the ",(0,s.jsx)(n.code,{children:"X-Picture"})," header, as well as the other\nheaders injected by ",(0,s.jsx)(n.code,{children:"inject headers with claims"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "X-Picture": "https://avatars.githubusercontent.com/u/3826416?v=4",\n  "X-Token-Subject": "github.com/greenpau",\n  "X-Token-User-Name": "Paul Greenberg",\n  "X-Token-User-Roles": "authp/guest"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"nested-data-source",children:"Nested Data Source"}),"\n",(0,s.jsx)(n.p,{children:"Additionally, one could inject data from a nested data structure."}),"\n",(0,s.jsx)(n.p,{children:"The partical list of token claims follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  "userinfo": {\n    "custom_groups": [\n      "authp/admin",\n      "authp/user"\n    ],\n    "name": "Paul Greenberg",\n    "zoneinfo": "America/Los_Angeles"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Apply the following configuration snippet:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  security {\n    authorization policy mypolicy {\n      inject header "X-User-Custom-Groups" from "userinfo|custom_groups"\n      inject header "X-User-Timezone" from "userinfo|zoneinfo"\n      inject header "X-User-Name" from "userinfo|name"\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Based on the above configuration, the plugin sends the following headers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    "X-User-Custom-Groups": "authp/admin, authp/user",\n    "X-User-Name": "Paul Greenberg",\n    "X-User-Timezone": "America/Los_Angeles"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"strip-jwt-token-from-http-request",children:"Strip JWT Token from HTTP Request"}),"\n",(0,s.jsx)(n.p,{children:"The following directive instructs the plugin to remove the found\ntoken from a request."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"{\n  security {\n    authorization policy mypolicy {\n      enable strip token\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": Currently, this feature works with cookies only. It will\nnot strip a token from an authorization header."]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);