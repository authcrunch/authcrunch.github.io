"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5966],{4948:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"authorize/token-verification","title":"Token Verification","description":"Find the information about the various algorithms described below in","source":"@site/docs/authorize/token-verification.md","sourceDirName":"authorize","slug":"/authorize/token-verification","permalink":"/docs/authorize/token-verification","draft":false,"unlisted":false,"editUrl":"https://github.com/authcrunch/authcrunch.github.io/edit/main/docs/authorize/token-verification.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"IP Address Filtering","permalink":"/docs/authorize/ip-filter"},"next":{"title":"Auto-Redirect URL","permalink":"/docs/authorize/auto-redirect-url"}}');var t=i(4848),s=i(8453);const o={sidebar_position:7},c="Token Verification",d={},a=[{value:"Verification with Shared Secret",id:"verification-with-shared-secret",level:2},{value:"Verification with RSA and ECDSA Keys",id:"verification-with-rsa-and-ecdsa-keys",level:2},{value:"Generate RSA Public Key",id:"generate-rsa-public-key",level:3},{value:"Generate ECDSA Public Key",id:"generate-ecdsa-public-key",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"token-verification",children:"Token Verification"})}),"\n",(0,t.jsxs)(n.p,{children:["Find the information about the various algorithms described below in\n",(0,t.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc7518",children:"RFC 7518"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"verification-with-shared-secret",children:"Verification with Shared Secret"}),"\n",(0,t.jsx)(n.p,{children:"The shared secret methods are based on Hash-based Message Authentication Code\n(HMAC) algorithm, where the hash is being computed using SHA256, SHA384, and\nSHA512 hash functions."}),"\n",(0,t.jsx)(n.p,{children:"The supported methods for the verification of token signatures are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"HS256"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"HS384"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"HS512"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['The following Caddyfile directives set the default token verification key to\n"shared" (symmetric) key with the value of ',(0,t.jsx)(n.code,{children:"383aca9a-1c39-4d7a-b4d8-67ba4718dd3f"}),".\nIt also sets a custom token name. The plugin would search for tokens with\nthe ",(0,t.jsx)(n.code,{children:"app_token"})," name."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{\n  security {\n    authorization policy mypolicy {\n      crypto key verify 383aca9a-1c39-4d7a-b4d8-67ba4718dd3f\n      crypto key token name app_token\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The syntax is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"crypto key verify <SHARED_SECRET>\ncrypto key token name <TOKEN_NAME>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, the key could be set via environment variables. The\n",(0,t.jsx)(n.code,{children:"from env APP_TOKEN"})," instructs the plugin to load the key from\n",(0,t.jsx)(n.code,{children:"APP_TOKEN"})," environment variable."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{\n  security {\n    authorization policy mypolicy {\n      crypto key verify from env APP_TOKEN\n      crypto key token name app_token\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The syntax is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"crypto key verify from env <NAME>\ncrypto key token name <TOKEN_NAME>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, the key may have a key ID. It is otherwise known as ",(0,t.jsx)(n.code,{children:"kid"}),".\nIt could be passed via right after the ",(0,t.jsx)(n.code,{children:"crypto key"})," keywords."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{\n  security {\n    authorization policy mypolicy {\n      crypto key e5ZaB46bF27d verify 383aca9a-1c39-4d7a-b4d8-67ba4718dd3f\n      crypto key e5ZaB46bF27d token name app_token\n      crypto key 3bc4be49abf6 verify from env SECRET_TOKEN\n      crypto key 3bc4be49abf6 token name secret_token\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The syntax is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"crypto key <ID> verify <SHARED_SECRET>\ncrypto key <ID> verify from env <NAME>\ncrypto key <ID> token name <TOKEN_NAME>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"verification-with-rsa-and-ecdsa-keys",children:"Verification with RSA and ECDSA Keys"}),"\n",(0,t.jsxs)(n.p,{children:["The RSA and ECDSA methods are based on asymmetric signature algorithms\ndefined in ",(0,t.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc7518",children:"RFC7518"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The supported RSA methods are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"RS256"}),": RSASSA-PKCS1-v1_5 using SHA-256"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"RS384"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"RS512"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The DSA are based on the Elliptic Curve Digital Signature Algorithm (ECDSA).\nSee ",(0,t.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc7518#section-3.4",children:"RFC7518 Section 3.4"}),"\nfor details."]}),"\n",(0,t.jsx)(n.p,{children:"The supported DSA methods are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ES256"}),": ECDSA using P-256 and SHA-256 (SHA256withECDSA)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The Elliptic Curve has 256-bit integer prime."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ES384"}),": ECDSA using P-384 and SHA-384 (SHA384withECDSA)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The Elliptic Curve has 384-bit integer prime."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ES512"}),": ECDSA using P-521 and SHA-512 (SHA512withECDSA)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The Elliptic Curve has 512-bit integer prime."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"P-256"})," curve (aka prime256v1) is being used in U2F and CBOR."]}),"\n",(0,t.jsx)(n.p,{children:'The verification of the tokens is being done by "public" RSA or ECDSA keys.\nIf the plugin finds a "private" key, it would extract "public" key from it\nand that key would be used to verify tokens.'}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE"}),": The ",(0,t.jsx)(n.code,{children:"verify"})," keyword is used when the keys provided are public keys.\nOtherwise, user ",(0,t.jsx)(n.code,{children:"sign-verify"})," or ",(0,t.jsx)(n.code,{children:"auto"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The following Caddyfile directives configure multiple token verification\nkeys."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The default key ID (aka kid 0) is defined when the key ID value is\nnot provided. Loads the key from ",(0,t.jsx)(n.code,{children:"/etc/gatekeeper/auth/jwt/verify_key1.pem"})," file."]}),"\n",(0,t.jsxs)(n.li,{children:["The key ID ",(0,t.jsx)(n.code,{children:"e5ZaB46bF27d"}),": loads from ",(0,t.jsx)(n.code,{children:"/etc/gatekeeper/auth/jwt/verify_key2.pem"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The key ID ",(0,t.jsx)(n.code,{children:"3bc4be49abf6"}),": loads the key from the file stored in the ",(0,t.jsx)(n.code,{children:"VERIFY_KEY_FILE"}),"\nenvironment variable."]}),"\n",(0,t.jsxs)(n.li,{children:["The key ID ",(0,t.jsx)(n.code,{children:"pik3mfhsXR1B"}),": loads the keys from the directory stored in the\nenvironment variable ",(0,t.jsx)(n.code,{children:"VERIFY_KEY_DIR"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{\n  security {\n    authorization policy mypolicy {\n      crypto key verify from file /etc/gatekeeper/auth/jwt/verify_key1.pem\n      crypto key e5ZaB46bF27d verify from file /etc/gatekeeper/auth/jwt/verify_key2.pem\n      crypto key 3bc4be49abf6 verify from env VERIFY_KEY_FILE as file\n      crypto key pik3mfhsXR1B verify from env VERIFY_KEY_DIR as directory\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Additionally, there could be a directory with public PEM keys."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{\n  security {\n    authorization policy mypolicy {\n      crypto key e5ZaB46bF27d verify from directory /etc/gatekeeper/auth/jwt\n      crypto key 3bc4be49abf6 verify from env VERIFY_KEY_DIR as directory\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"The syntax is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"crypto key <ID> verify from <directory|file> <PATH>\ncrypto key <ID> verify from env <NAME> as <directory|file|value>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generate-rsa-public-key",children:"Generate RSA Public Key"}),"\n",(0,t.jsxs)(n.p,{children:["Th ",(0,t.jsx)(n.code,{children:"verify_key1.pem"})," is RSA public key. It is generated with\nthe following commands:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"openssl genrsa -out /etc/gatekeeper/auth/jwt/sign_key1.pem 2048\nopenssl rsa -in /etc/gatekeeper/auth/jwt/sign_key1.pem -pubout -out /etc/gatekeeper/auth/jwt/verify_key1.pem\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The content of ",(0,t.jsx)(n.code,{children:"verify_key1.pem"})," follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAphJPa8M0D/iY/I6kAs7K\n4M30kPfurFEwpJe4zd9h9E/iuWbqpHCx+sQqAG8xJawddG6WupZiWRY3+44hw7nH\nsrH7XY2Dv/6igo1WU6U0PjHQ0SRSKGkGb3x4iwHx8IMsUQ44iDZYugxrjf5xkthc\n6MNwqqcTuHLJtgEqSPETiqZgbcRHEWtqPb/LuQl3hLscokO7e5Yw0LQibtnZt4UR\nWb3z9CrzP8yS2Ibf8vbhiVhzYWSkXOiwsA0X5sBdNZbg8AkkqgyVe2FtCPBPdW6/\nKOj8geX+P2Wms6msOZIRk7FqpKfEiK//arjumEsVF34S7GPavynLmyLfC4j9DcFI\nPQIDAQAB\n-----END PUBLIC KEY-----\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generate-ecdsa-public-key",children:"Generate ECDSA Public Key"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"verify_key1.pem"})," is generated with the following commands."]}),"\n",(0,t.jsx)(n.p,{children:"First, review the output of the following command to determine the\navailable Elliptic Curves."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$ openssl ecparam -list_curves\n  secp224r1 : NIST/SECG curve over a 224 bit prime field\n  secp256k1 : SECG curve over a 256 bit prime field\n  secp384r1 : NIST/SECG curve over a 384 bit prime field\n  secp521r1 : NIST/SECG curve over a 521 bit prime field\n  prime256v1: X9.62/SECG curve over a 256 bit prime field\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, generate ",(0,t.jsx)(n.code,{children:"ES256"})," private and public key pair:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"openssl ecparam -genkey -name prime256v1 -noout \\\n  -out /etc/gatekeeper/auth/jwt/sign_key2.pem\nopenssl ec -in /etc/gatekeeper/auth/jwt/sign_key2.pem -pubout \\\n  -out /etc/gatekeeper/auth/jwt/verify_key2.pem\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The content of ",(0,t.jsx)(n.code,{children:"verify_key2"})," follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEwlCJyaA2uhZ29yhDkmsSm6nEageO\ne0rB8fQM/g4WpLtz1AbPVZq9mjFHz390r7b2Dz6P/fNYqk5joikWVXrJ9g==\n-----END PUBLIC KEY-----\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For ",(0,t.jsx)(n.code,{children:"ES384"})," use ",(0,t.jsx)(n.code,{children:"-name secp384r1"})," argument."]}),"\n",(0,t.jsxs)(n.p,{children:["For ",(0,t.jsx)(n.code,{children:"ES512"})," use ",(0,t.jsx)(n.code,{children:"-name secp521r1"})," argument."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);